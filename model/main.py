from navec import Navec
# from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from annoy import AnnoyIndex

path = 'navec_hudlit_v1_12B_500K_300d_100q.tar'
navec = Navec.load(path)

paragraphs = [
    '''
    Коллективный договор ОАО «РЖД» на 2023 - 2025 годы - правовой акт,
    регулирующий социально-трудовые отношения в открытом акционерном
    обществе «Российские железные дороги» между сторонами социального
    партнерства - Работниками и Работодателем в лице их представителей.
    ''',
    '''
    Настоящий Договор является единым для ОАО «РЖД», включая
    филиалы, структурные подразделения и представительства, за исключением
    Петропавловского отделения Южно-Уральской железной дороги - филиала
    ОАО «РЖД», расположенного на территории Республики Казахстан, в котором,
    на основе настоящего Договора и с учетом особенностей законодательства
    Республики Казахстан, заключается отдельный коллективный договор на 2023 -
    2025 годы.
    ''',
    '''
    Нормы раздела 9 настоящего Договора не применяются в отношении
    указанного филиала. При этом, нормы, регулирующие вопросы социального
    партнерства, включаются в коллективный договор данного филиала в редакции,
    согласованной с Комиссией по подготовке коллективного договора ОАО
    «РЖД» и контролю за его выполнением в установленном порядке; указанные
    нормы не могут снижать уровень гарантий, установленных для
    уполномоченного представителя работников указанного филиала, по
    сравнению с уровнем гарантий, установленных для Профсоюза.
    '''
]

# Функция для вычисления эмбеддинга текста
def get_text_embedding(text):
  words = text.split()  # Разбиваем текст на слова
  # Получаем эмбединги для слов
  words_embeddings = [navec[word] for word in words if word in navec]
  if words_embeddings:
    # Усредняем эмбеддинги для получения эмбеддинга текста
    return np.mean(words_embeddings, axis=0)
  else:
    # Возвращаем нулевой вектор, если нет известных слов
    return np.zeros(embedding_dim)